{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","id","name","email","react_default","a","createElement","className","src","concat","alt","CardList","robots","cardsArray","map","user","i","components_Card","key","SearchBox","searchField","searchChange","style","marginBottom","type","placeholder","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this2","fetch","then","response","json","users","setState","catch","err","console","log","_this$props","props","onSearchChange","filteredRobots","filter","robot","toLocaleLowerCase","includes","length","components_SearchBox","components_CardList","Component","connect","dispatch","event","payload","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","initialState","store","createStore","arguments","undefined","action","assign","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ce2b867f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n\r\n  return (\r\n\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img src={`https://robohash.org/${id}?size=150x150`} alt= { `Agent ${name}` } />\r\n      <div>\r\n        <h3>{name}</h3>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n\r\n  // To check error handling with ErrorBoundary component \r\n  // if(true) {\r\n  //   throw new Error('Error checking to see if ErrorBoundary works lol!');\r\n  // }\r\n\r\n  const cardsArray = robots.map((user, i) => {\r\n    return (\r\n      <Card \r\n        id={robots[i].id} \r\n        key={robots[i].id} \r\n        name={robots[i].name} \r\n        email={robots[i].email} \r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      { cardsArray }\r\n    </div>\r\n  );\r\n  \r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchField, searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input \r\n        style={{ marginBottom: \"20px\" }} \r\n        className=\"pa3 ma2 ba b--green bg-lightest-blue tc\"\r\n        type=\"search\" \r\n        placeholder=\"Search Robots\" \r\n        onChange={searchChange} \r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n// import Scroll from \"../components/Scroll\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\n// import ErrorBoundary from \"../components/ErrorBoundary\";\r\n// import { robots } from './robots'; //commented out because using fetch to get real data instead of hardcoded\r\nimport \"./App.css\";\r\n\r\nimport { setSearchField } from \"../actions\";\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    // from reducer\r\n\r\n    // this below line gives error because we are using only one reducer in this example. Explanation given below:\r\n    // searchField: state.searchRobots.searchField (use this in case of multiple reducers)\r\n    searchField: state.searchField\r\n\r\n    // Finally found a solution, thanks to the response at discord from noirFatale,\r\n    // I've found correctly what was creating the problem, hope it solves the matter:\r\n    // \"That's because you have only ONE reducer  existing in createStore() .\r\n    // So that store directly refers to only one reducer (searchRobots) which returns\r\n    //  the state searchField.  When you have multiple reducers you COMBINE them into\r\n    // one rootReducer and this rootReducer returns multiple reducers, if you want to\r\n    // refer to the state of one of them you have to grab them by reducers name...\r\n\r\n    // So to sum it up: if you refer in createStore() directly to the one reducer,\r\n    // you grab it's state throug state.stateName (in your case state.searchField) , but\r\n    // if you refer in createStore() to one rootReducer, which contains multiple combined\r\n    // reducers and returns them(not their state),\r\n    // you grab each state like this:  state.reducerName.stateName (in your case, when you\r\n    // will add more reducers and combine them in one root reducer,\r\n    // it will be state.searchRobots.searchField). Hope that helped\"\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    // event is going to dispatch the action setSearchField\r\n    // since setSearchField recieves text as parameter in action, its argument is set to e.target.value\r\n    onSearchChange: event => dispatch(setSearchField(event.target.value))\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n  // Adding state\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      // robots: robots, //commented out because using fetch\r\n      robots: []\r\n      // searchField: \"\"\r\n      // commented out because Redux now replaces the state in app\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => response.json())\r\n      .then(users => { this.setState({ robots: users }) })\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  // onSearchChange = event => {\r\n  //   this.setState({ searchField: event.target.value });\r\n  // };\r\n\r\n  // commented out because we are getting it as props in mapDispatchToProps\r\n\r\n  render() {\r\n\r\n    // , searchField\r\n    // commented out searchField from this.state because its coming down as props so made a new const below for that\r\n\r\n    let { searchField, onSearchChange } = this.props;\r\n    let { robots } = this.state;\r\n    console.log(this.state.robots);\r\n\r\n    let filteredRobots = robots.filter(robot => robot.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase()));\r\n\r\n    // added onSearchChange as it is now coming from props and isnt a part of App.js component\r\n\r\n\r\n    if (!robots.length) {\r\n      return <h2>LOADING...</h2>;\r\n    } else {\r\n      return (\r\n        <div className=\"tc\">\r\n          <div>\r\n            <h1 className=\"f1\">RoboFriends</h1>\r\n            <SearchBox searchChange={onSearchChange} />\r\n          </div>\r\n          {/* <Scroll> */}\r\n          {/* <ErrorBoundary> */}\r\n          <CardList robots={filteredRobots} />\r\n          {/* </ErrorBoundary> */}\r\n          {/* </Scroll> */}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(App);\r\n","import { CHANGE_SEARCH_FIELD } from \"./constants\";\r\n\r\nexport const setSearchField = text => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n});\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CHANGE_SEARCH_FIELD } from \"./constants\";\r\n\r\nconst initialState = {\r\n  // searchField is an empty string just as it is initially set in App.js using this.state\r\n  searchField: \"\"\r\n};\r\n\r\n// Reducer\r\nexport const searchRobots = (state = { initialState }, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\n\nimport \"./index.css\";\nimport \"tachyons\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { searchRobots } from \"./reducers\";\n\nconst store = createStore(searchRobots);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}